polling = read.csv("PollingData.csv")
polling = read.csv("PollingData_Imputed.csv")
setwd("/Users/kiote/www/kaggle/edx/week3")
polling = read.csv("PollingData_Imputed.csv")
install.packages("mice")
library(mice)
simple = polling[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount")]
summary(simple)
set.seed(144)
imputed = complete(mice(simple))
summary(polling)
polling = read.csv("PollingData.csv")
summary(polling)
simple = polling[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount")]
summary(simple)
set.seed(144)
imputed = complete(mice(simple))
summary(imputed)
polling$Rasmussen = imputed$Rasmussen
polling$SurveyUSA = imputed$SurveyUSA
summary(polling)
sign(20)
sign(-10)
sign(0)
table(sign(Train$Rasmussen))
setwd("/Users/kiote/www/kaggle/titanic")
data = read.csv("train.csv")
summary(data)
col(data$Survived, data$Sex)
cor(data)
cor(data$Survived, data$Age)
str(data)
data$SexInt = 0
View(data)
data$SexInt[data$Sex == 'male'] = 1
View(data)
cor(data$Survived, data$Fare)
cor(Train[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount", "Republican")])
cor(data[c"Survived", "Fare"])
cor(data[c("Survived", "Fare")])
cor(data[c("Survived", "Fare", "SexInt")])
cor(data[c("Survived", "Fare", "SexInt", "Age")])
cor(data[c("Survived", "Fare", "SexInt", "Age", "Pclass")])
simple = data[c("Survived", "Fare", "SexInt", "Age", "Pclass")]
imputed = complete(mice(simple))
summary(imputed)
data$Age = simple$Age
summary(data)
data$Age = imputed$Age
summary(data)
cor(data[c("Survived", "Fare", "SexInt", "Age", "Pclass")])
data$EmbarkedInt[data$Embarked == 'S'] = 1
data$EmbarkedInt[data$Embarked == 'C'] = 2
View(data)
data$EmbarkedInt[data$Embarked == 'Q'] = 3
View(data)
summary(data)
data$EmbarkedInt = 0
summary(data)
data$EmbarkedInt[data$Embarked == 'S'] = 1
summary(data)
data$EmbarkedInt[data$Embarked == 'C'] = 2
summary(data)
data$EmbarkedInt[data$Embarked == 'Q'] = 3
summary(data)
data$Has.Cabin = 0
data$Has.Cabin[data$Cabin <> '']=1
data$Has.Cabin[data$Cabin != '']=1
View(data)
model = glm(Survived ~ Pclass + Age + SibSp + Parch + Fare + SexInt + EmbarkedInt + Has.Cabin, data=data, family = binomial)
summary(model)
split = sample.split(data$Survived, SplitRatio = 0.65)
library(caTools)
set.seed(1000)
split = sample.split(data$Survived, SplitRatio = 0.65)
train = subset(data, split == TRUE)
test = subset(data, split == FALSE)
setwd("/Users/kiote/www/kaggle/titanic")
data = read.csv("train.csv")
data$SexInt = 0
data$SexInt[data$Sex == 'male'] = 1
library(mice)
simple = data[c("Survived", "Fare", "SexInt", "Age", "Pclass")]
imputed = complete(mice(simple))
data$Age = imputed$Age
data$EmbarkedInt = 0
data$EmbarkedInt[data$Embarked == 'S'] = 1
data$EmbarkedInt[data$Embarked == 'C'] = 2
data$EmbarkedInt[data$Embarked == 'Q'] = 3
data$Has.Cabin = 0
data$Has.Cabin[data$Cabin != '']=1
library(caTools)
set.seed(1000)
split = sample.split(data$Survived, SplitRatio = 0.65)
train = subset(data, split == TRUE)
test = subset(data, split == FALSE)
model = glm(Survived ~ Pclass + Age + SibSp + Parch + Fare + SexInt + EmbarkedInt + Has.Cabin, data=train, family = binomial)
summary(model)
predictTest = predict(model, type="response", newdata=test)
table(test$Survived, predictTest > 0.5)
accuracy = (166 + 84)/(166 + 84 + 26 + 36)
summary(data)
baseline_accuracy = (166 + 26)/(166 + 84 + 26 + 36)
library(ROCR)
ROCRpred = prediction(predictTest, test$Survived)
as.numeric(performance(ROCRpred, "auc")@y.values)
result = read.csv("test.csv")
table(test$Survived, predictTest > 0.5)
table(test$Survived, predictTest > 0.6)
(174+75)/(174+18+45+75)
table(test$Survived, predictTest > 0.4)
(160+91)/(160+91+32+29)
ROCRpred = prediction(predictTest, test$Survived)
as.numeric(performance(ROCRpred, "auc")@y.values)
table(test$Survived, predictTest > 0.3)
(151+100)/(151+100+20+41)
table(test$Survived, predictTest > 0.2)
(138+102)/(151+100+20+41)
table(test$Survived, predictTest > 0.4)
accuracy = (160 + 91)/(160 + 91 + 32 + 29)
result$SexInt = 0
result$SexInt[data$Sex == 'male'] = 1
simple = result[c("Survived", "Fare", "SexInt", "Age", "Pclass")]
simple = result[c("Fare", "SexInt", "Age", "Pclass")]
imputed = complete(mice(simple))
summary(imputed)
data$EmbarkedInt = 0
data$EmbarkedInt[data$Embarked == 'S'] = 1
data$EmbarkedInt[data$Embarked == 'C'] = 2
data$EmbarkedInt[data$Embarked == 'Q'] = 3
summary(data)
data$Has.Cabin = 0
data$Has.Cabin[data$Cabin != '']=1
predictResult = predict(model, type="response", newdata=result)
result$SexInt = 0
result$SexInt[result$Sex == 'male'] = 1
result$EmbarkedInt = 0
result$EmbarkedInt[result$Embarked == 'S'] = 1
result$EmbarkedInt[result$Embarked == 'C'] = 2
result$EmbarkedInt[result$Embarked == 'Q'] = 3
result$Has.Cabin = 0
result$Has.Cabin[result$Cabin != '']=1
predictResult = predict(model, type="response", newdata=result)
submit = data.frame(PassengerId = result$PassengerId, Survived = predictResult)
write.csv(submit, file = "logisticReg.csv", row.names = FALSE)
summary(result)
simple = result[c("Fare", "SexInt", "Age", "Pclass")]
imputed = complete(mice(simple))
summary(imputed)
result$Age = imputed$Age
summary(result)
predictResult = predict(model, type="response", newdata=result)
result$Survived = 0
result$Survived[predictResult > 0.4] = 1
View(result)
submit = data.frame(PassengerId = result$PassengerId, Survived = result$Survived)
write.csv(submit, file = "logisticReg.csv", row.names = FALSE)
setwd("/Users/kiote/www/kaggle/edx/week3")
songs = read.csv("songs.csv")
View(songs)
table(songs$year)
View(songs)
table(songs$artistname)
table(songs$artistname == 'Michael Jackson')
subset(songs$artistname == 'Michael Jackson')
subset(songs, songs$artistname == 'Michael Jackson')
subset(songs, songs$artistname == 'Michael Jackson' & songs$Top10 == 1)
summary(songs$timesignature)
str(songs$timesignature)
unique(songs$timesignature)
sort(table(songs$timesignature),decreasing=TRUE)[1:3]
sort(table(songs$tempo),decreasing = TRUE)[1:3]
sort(table(songs$tempo, songs$songtitle),decreasing = TRUE)[1:3]
sort(table(songs$tempo, songs$songtitle),decreasing = TRUE)[1:3]
sort(table(songs$tempo),decreasing = TRUE)[1:3]
sort(table(songs$tempo))[1:3]
,decreasing = TRUE
sort(table(songs$tempo),decreasing = TRUE)[1:3]
subset(songs, songs$songtitle=='Until The Day I Die')
subset(songs, songs$songtitle=="Wanna Be Startin' Somethin'")
subset(songs, songs$songtitle=="Wanna Be Startin' Somethin'")$tempo
subset(songs, songs$songtitle=="My Happy Ending")$tempo
subset(songs, songs$songtitle=="You Make Me Wanna...")$tempo
SongeTrain = subset(songs, songs$year <= 2009)
SongsTrain = subset(songs, songs$year <= 2009)
SongsTest = subset(songs, songs$year == 2010)
SongsTrain = SongsTrain[ , !(names(SongsTrain) %in% nonvars) ]
SongsTest = SongsTest[ , !(names(SongsTest) %in% nonvars) ]
nonvars = c("year", "songtitle", "artistname", "songID", "artistID")
SongsTrain = SongsTrain[ , !(names(SongsTrain) %in% nonvars) ]
SongsTest = SongsTest[ , !(names(SongsTest) %in% nonvars) ]
SongsLog1 = glm(Top10 ~ ., data=SongsTrain, family=binomial)
summary(SongsLog1)
cor(songs$loudness, songs$energy)
SongsLog2 = glm(Top10 ~ . - loudness, data=SongsTrain, family=binomial)
summary(SongsLog2)
SongsLog3 = glm(Top10 ~ . - energy, data=SongsTrain, family=binomial)
summary(SongsLog3)
TestPrediction = predict(SongsLog3, newdata=SongsTest, type="response")
table(SongsTest$Top10, TestPrediction >= 0.45)
accuracy = (309+19)/(309+19+45)
accuracy
baseline_accuracy = (309+5)/(309+19+45)
baseline_accuracy
sensitivity = 19/(19+40)
sensitivity
specifisity = 309/(309+5)
specifisity
parole = read.csv("parole.csv")
sum(parole$violator)
str(parole)
View(parole)
relevel(parole$state)
relevel(parole$state, 1)
as.factor(parole$state)
parole$state = as.factor(parole$state)
str(parole)
parole$crime = as.factor(parole$crime)
str(parole)
str(parole$state)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
ParoleLog = glm(violator ~ ., data=train, family = binomial)
summary(ParoleLog)
exp(1.6)
exp(1.61)
predict(ParoleLog, data.frame(male=1, race=1, age=50, state=1, time.served=3, max.sentence=12, multiple.offences=0, crime=2))
predict(ParoleLog, data.frame(male=1, race=1, age=50, state=1, time.served=3, max.sentence=12, multiple.offenses=0, crime=2))
predict(ParoleLog, data.frame(male=1, race=1, age=50, state=1, time.served=3, max.sentence=12, multiple.offenses=0, crime2=1))
predict(ParoleLog, data.frame(male=1, race=1, age=50, state=1, time.served=3, max.sentence=12, multiple.offenses=0, crime2=1, crime=2))
ParoleLog = glm(violator ~ ., data=train, family = binomial)
summary(ParoleLog)
predict(ParoleLog, data.frame(male=1, race=1, age=50, state2=0, state3=0, state4=0,, time.served=3, max.sentence=12, multiple.offenses=0, crime2=1, crime3=0, crime4=0))
predict(ParoleLog, data.frame(male=1, race=1, age=50, state2=0, state3=0, state4=0, time.served=3,
max.sentence=12, multiple.offenses=0, crime2=1, crime3=0, crime4=0))
predict(ParoleLog, data.frame(male=1, race=1))
predict(ParoleLog, data.frame(male=1, race=1, age=50))
predict(ParoleLog, data.frame(male=1, race=1, age=50, state=2))
predict(ParoleLog, data.frame(male=1, race=1, age=50, state=2, time.served=3, max.sentence=12, multiple.offenses=0, crime=2))
predict(ParoleLog, data.frame(male=1, race=1, age=50, state=2, time.served=3, max.sentence=12, multiple.offenses=0))
predict(ParoleLog, data.frame(male=1, race=1, age=50, state=2, time.served=3, max.sentence=12, multiple.offenses=0, as.factor(crime=2)))
predict(ParoleLog, data.frame(male=1, race=1, age=50, state=2, time.served=3, max.sentence=12, multiple.offenses=0, as.factor(crime)))
predict(ParoleLog, data.frame(male=1, race=1, age=50, state=2, time.served=3, max.sentence=12, multiple.offenses=0, as.factor(crime), crime=2))
predict(ParoleLog, data.frame(male=1, race=1, age=50, state=2, time.served=3, max.sentence=12, multiple.offenses=0, crime=2, as.factor(crime), crime=2))
crime = 2
predict(ParoleLog, data.frame(male=1, race=1, age=50, state=2, time.served=3, max.sentence=12, multiple.offenses=0, as.factor(crime)))
crime = as.factor(2)
state = as.factor(2)
predict(ParoleLog, data.frame(male=1, race=1, age=50, state, time.served=3, max.sentence=12, multiple.offenses=0, crime))
predict(ParoleLog, data=test, type="response")
predictViolation = predict(ParoleLog, data=test, type="response")
max(predictViolation)
summary(predictViolation)
set.seed(144)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
ParoleLog = glm(violator ~ ., data=train, family = binomial)
predictViolation = predict(ParoleLog, data=test, type="response")
max(predictViolation)
table(test$violation, predictViolation > 0.5)
predictViolation = predict(ParoleLog, newdata=test, type="response")
max(predictViolation)
table(test$violation, predictViolation > 0.5)
len(test)
lenght(test)
summary(test$violator)
table(test$violatщк, predictViolation > 0.5)
table(test$violator, predictViolation > 0.5)
sensetivity = 12/(12+11)
sensetivity
specifisity = 167/(167+12)
specifisity
accuracy = (167+12)/(12+11)
accuracy = (167+12)/(12+11+167+12)
accuracy
songs = read.csv("songs.csv")
table(songs$year)
table(songs$artistname == 'Michael Jackson')
subset(songs, songs$artistname == 'Michael Jackson' & songs$Top10 == 1)
summary(songs$timesignature)
str(songs$timesignature)
unique(songs$timesignature)
sort(table(songs$timesignature),decreasing=TRUE)[1:3]
sort(table(songs$tempo),decreasing = TRUE)[1:3]
SongsTrain = subset(songs, songs$year <= 2009)
SongsTest = subset(songs, songs$year == 2010)
# except some non-numeric variables
nonvars = c("year", "songtitle", "artistname", "songID", "artistID")
SongsTrain = SongsTrain[ , !(names(SongsTrain) %in% nonvars) ]
SongsTest = SongsTest[ , !(names(SongsTest) %in% nonvars) ]
SongsLog1 = glm(Top10 ~ ., data=SongsTrain, family=binomial)
summary(SongsLog1)
cor(songs$loudness, songs$energy)
SongsLog2 = glm(Top10 ~ . - loudness, data=SongsTrain, family=binomial)
summary(SongsLog2)
SongsLog3 = glm(Top10 ~ . - energy, data=SongsTrain, family=binomial)
summary(SongsLog3)
TestPrediction = predict(SongsLog3, newdata=SongsTest, type="response")
table(SongsTest$Top10, TestPrediction >= 0.45)
table(test$violator, predictViolation > 0.5)
accuracy = (167+12)/(12+11+167+12)
base_accuracy = (167+12)/(12+11+167+12)
base_accuracy
table(test$violator, predictViolation > 0.6)
table(test$violator, predictViolation > 0.4)
table(test$violator, predictViolation >= 0.5)
library(ROCR)
ROCRpred = prediction(predictViolation, test$violator)
as.numeric(performance(ROCRpred, "auc")@y.values)
loans = read.csv("loans.csv")
summary(loans)
summary(loans$not.fully.paid)
summary(loans$not.fully.paid ==0)
summary(loans$not.fully.paid == 1)
1533/(1533+8045)
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
set.seed(144)
split = sample.split(loans, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
train = subset(loans, split == TRUE)
test = subset(loans, split == FALSE)
split = sample.split(loans, SplitRatio = 0.7)
train = subset(loans, split == TRUE)
test = subset(loans, split == FALSE)
set.seed(144)
split = sample.split(loans, SplitRatio = 0.7)
train = subset(loans, split == TRUE)
test = subset(loans, split == FALSE)
set.seed(144)
split = sample.split(loans, SplitRatio = 0.7)
train = subset(loans, split == TRUE)
test = subset(loans, split == FALSE)
mod = glm(not.fully.paid  ~ ., data=train, family = binomial)
summary(mod)
log(-10)
exp(-10)
exp(710*(-0.008))/exp(700*(-0.008))
predicted.risk = predict(mod, newdata=test, type="response")
View(train)
table(test$not.fully.payed, predicted.risk > 0.5)
test = subset(loans, split == FALSE)
table(test$not.fully.paid, predicted.risk > 0.5)
accuracy = (2895+16)/(2895+16+18+492)
accuracy
table(test$not.fully.paid, predicted.risk >= 0.5)
set.seed(144)
split = sample.split(loans, SplitRatio = 0.7)
train = subset(loans, split == TRUE)
test = subset(loans, split == FALSE)
mod = glm(not.fully.paid  ~ ., data=train, family = binomial)
summary(mod)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
imputed = complete(mice(loans[vars.for.imputation]))
loans[vars.for.imputation] = imputed
set.seed(144)
split = sample.split(loans, SplitRatio = 0.7)
train = subset(loans, split == TRUE)
test = subset(loans, split == FALSE)
mod = glm(not.fully.paid  ~ ., data=train, family = binomial)
summary(mod)
library(ROCR)
library(ROCR)
ROCRpred = prediction(predicted.risk, test$not.fully.paid)
as.numeric(performance(ROCRpred, "auc")@y.values)
mod2 = glm(not.fully.paid  ~ init.rate, data=train, family = binomial)
mod2 = glm(not.fully.paid  ~ int.rate, data=train, family = binomial)
summary(mod2)
test$predicted.risk = predicted.risk
predicted.risk2 = predict(mod2, newdata=test, type="response")
max(predicted.risk2)
table(test$not.fully.paid, predicted.risk2 >= 0.5)
ROCRpred = prediction(predicted.risk2, test$not.fully.paid)
as.numeric(performance(ROCRpred, "auc")@y.values)
ROCRpred = prediction(mod2, test$not.fully.paid)
ROCRpred = prediction(predicted.risk2, test$not.fully.paid)
as.numeric(performance(ROCRpred, "auc")@y.values)
10*exp(0.6*3)
10*exp(3*0.6)
10*exp(0.06*3)
test$profit = exp(test$int.rate*3) - 1
test$profit = exp(test$int.rate*3) - 1
test$profit[test$not.fully.paid == 1] = -1
max(test$profit)
max(test$profit) * 10
highInterest = subset(test, test$int.rate > 0.15)
summary(highInterest$profit)
table(highInterest$not.fully.paid)
130/379
379/130
379/(379+130)
130/(379+130)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
selectedLoans = subset(test, test != cutoff)
selectedLoans = subset(highInterest, test != cutoff)
selectedLoans = subset(highInterest, test != cutoff)
selectedLoans = subset(highInterest, highInterest != cutoff)
selectedLoans = subset(highInterest, highInterest$predicted.risk == 0)
selectedLoans = subset(cutoff, cutoff$predicted.risk == 0)
selectedLoans = subset(cutoff, cutoff$predicted.risk == 0)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
summary(highInterest$predicted.risk)
str(highInterest$predicted.risk)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
