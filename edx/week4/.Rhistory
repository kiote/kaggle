setwd("/Users/kiote/www/kaggle/edx/week4")
Claims = read.csv('ClaimsData.csv')
# buckets
table(Claims$bucket2009)/nrow(Claims)
library(caTools)
set.seed(88)
spl = sample.split(Claims$bucket2009, SplitRatio = 0.6)
ClaimsTrain = subset(Claims, spl == TRUE)
ClaimsTest = subset(Claims, spl == FALSE)
# baseline (predict the same outcome as at 2008)
table(ClaimsTest$bucket2009, ClaimsTest$bucket2008)
baseline_accuracy = (110138+10721+2774+1539+104)/nrow(ClaimsTest)
PenaltyMatrix = matrix(c(0,1,2,3,4,2,0,1,2,3,4,2,0,1,2,6,4,2,0,1,8,6,4,2,0), byrow=TRUE, nrow=5)
as.matrix(table(ClaimsTest$bucket2009, ClaimsTest$bucket2008))*PenaltyMatrix
baseline_penalty_error = sum(as.matrix(table(ClaimsTest$bucket2009, ClaimsTest$bucket2008))*PenaltyMatrix)/nrow(ClaimsTest)
# baseline (predict most frequent outcome, which is first bucket)
ClaimsTest$bucket.baseline = 1
table(ClaimsTest$bucket2009, ClaimsTest$bucket.baseline)
accuracy = 122978/nrow(ClaimsTest)
PenaltyVector = c(0,2,4,6,8)
sum(as.vector(table(ClaimsTest$bucket2009, ClaimsTest$bucket.baseline))*PenaltyVector)/nrow(ClaimsTest)
# CART model
library(rpart)
library(rpart.plot)
prp(ClaimsTree)
ClaimsTree = rpart(bucket2009 ~ . - reimbursement2009, data = ClaimsTrain, method="class", cp=0.00005)
prp(ClaimsTree)
ClaimsTree = rpart(bucket2009 ~ . - reimbursement2009, data = ClaimsTrain, method="class", cp=0.00005)
PredictTest = predict(ClaimsTree, newdata = ClaimsTest, type="class")
table(ClaimsTest$bucket2009, PredictTest)
accuracy = (114141+16102+118+201)/nrow(ClaimsTest)
as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix
sum(as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix)/nrow(ClaimsTest)
penalty_error = sum(as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix)/nrow(ClaimsTest)
ClaimsTree = rpart(bucket2009 ~ . - reimbursement2009, data = ClaimsTrain, method="class", cp=0.00005, params=list(loss=PenaltyMatrix))
ClaimsTree = rpart(bucket2009 ~ . - reimbursement2009, data = ClaimsTrain, method="class", cp=0.00005)
ClaimsTree = rpart(bucket2009 ~ . - reimbursement2009, data = ClaimsTrain, method="class", cp=0.00005, parms = list(loss=PenaltyMatrix))
PredictTest = predict(ClaimsTree, newdata = ClaimsTest, type="class")
table(ClaimsTest$bucket2009, PredictTest)
accuracy2 = (94310+18942+4692+636+2)/nrow(ClaimsTest)
penalty_error2 = sum(as.matrix(table(ClaimsTest$bucket2009, PredictTest))*PenaltyMatrix)/nrow(ClaimsTest)
setwd("/Users/kiote/www/kaggle/edx/week4")
boston= read.csv("boston.csv")
str(boston)
polt(boston$LAT, boston$LON)
plot(boston$LAT, boston$LON)
points(boston$LON[boston$CHAS==1], boston$LAT[boston$CHAS==1], col="blue", pch=19)
plot(boston$LAT, boston$LON)
points(boston$LON[boston$CHAS==1], boston$LAT[boston$CHAS==1], col="blue", pch=19)
points(boston$LON[boston$CHAS==1], col="blue", pch=19)
boston$LON[boston$CHAS==1]
boston$LAT[boston$CHAS==1]
boston$LON[boston$CHAS==1]
points(boston$LON[boston$CHAS==1], boston$LAT[boston$CHAS==1], col="blue", pch=19)
?points
points(boston$LON, col="blue", pch=19)
plot(boston$LAT, boston$LON)
plot(boston$LAT)
points(boston$LAT, col="blue", pch=19)
plot(boston$LAT, boston$LON)
points(boston$LAT, col="blue", pch=19)
points(boston$LAT, boston$LON, col="blue", pch=19)
points(boston$LAT[boston$CHAS == 1], boston$LON[boston$CHAS==1], col="blue", pch=19)
plot(boston$LAT, boston$LON)
points(boston$LAT[boston$CHAS == 1], boston$LON[boston$CHAS==1], col="blue", pch=19)
View(boston)
latlonlm = lm(MEDV ~ LAT + LON, data = boston)
summary(latlonlm)
points(boston$LAT[latlonlm$fitted.values>21.2], boston$LON[latlonlm$fitted.values>21.2], col="red", pch="$")
plot(boston$LAT, boston$LON)
points(boston$LAT[boston$MEDV > 21.2], boston$LON[boston$MEDV>21.2], col="blue", pch=19)
points(boston$LAT[latlonlm$fitted.values>21.2], boston$LON[latlonlm$fitted.values>21.2], col="red", pch="$")
load(rpart)
load(rpart.plot)
library(rpart)
library(rpart.plot)
latlontree = rpart(MEDV ~ LAT + LON, data=boston)
prp(latlontree)
plot(boston$LAT, boston$LON)
points(boston$LAT[boston$MEDV > 21.2], boston$LON[boston$MEDV>21.2], col="blue", pch=19)
fittedValues = predict(latlontree)
points(boston$LAT[fittedValues>21.2], boston$LON[fittedValues>21.2], col="red", pch="$")
latlontree = rpart(MEDV ~ LAT + LON, data=boston, minbucket=50)
prp(latlontree)
plot(boston$LAT, boston$LON)
points(boston$LAT[boston$MEDV > 21.2], boston$LON[boston$MEDV>21.2], col="blue", pch=19)
fittedValues = predict(latlontree)
points(boston$LAT[fittedValues>21.2], boston$LON[fittedValues>21.2], col="red", pch="$")
abline(v=-71.07)
abline(h=-71.07)
abline(v=42.21)
library(caTools)
set.seed(123)
split = sample.split(boston$MEDV, SplitRatio = 0.7)
train = subset(boston, split == TRUE)
test = subset(boston, split == FALSE)
linear = lm(MEDV ~ . -TOWN -TRACT, data = train)
summary(linear)
linreg.pred = predict(linear, newdata=test)
?predict
linreg.pred = predict(linear, newdata=test[ , !colnames(test) %in% c("TOWN", "TRACT")])
